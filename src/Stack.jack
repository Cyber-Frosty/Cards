class Stack {
    field StackItem head;
	field int counter;

    constructor Stack new() {
        return this;
    }

    method void push(Card card) {
        var StackItem item;
        var Card oldCard;

        // do card.putFront();
        // if (~(head = null)) {
        //     let oldCard = head.getCard();
        //     do oldCard.putBack();
        // }
        let item = StackItem.new(card, head);
        let head = item;
		let counter = counter + 1;
        return;
    }

    method Card pop() {
        var StackItem item;
        var Card card;
        // var Card newHead;

        if (head = null) {
            return null;
        }
        let item = head;
        let card = item.getCard();
        let head = item.getPrevious();
        // if (~(head = null)) {
        //     let newHead = head.getCard();
        //     do newHead.putFront();
        // }
        // do item.dispose();
		let counter = counter - 1;
        return card;
    }

    method boolean empty() {
        return (head = null);
    }

    method Card getHead() {
        var Card card;

        if (head = null) {
            return null;
        }

        let card = head.getCard();
        return card;
    }
	
	method int count() {
	    return counter;
	}
	
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
}