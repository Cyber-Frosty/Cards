class Pile {
    field Stack stack;
	field Stack toMove;
    field int column;
	field int row;

    constructor Pile new(int c, int r) {
        let stack = Stack.new();
		let toMove = Stack.new();
        let column = c;
		let row = r;
        return this;
    }

    method boolean canAddedToTableau(Card card) {
        var boolean isEmpty;
        var Card currentHead;
        var int currentSuit;
        var int cardSuit;
        var int checkSuit;
        var int currentValue;
        var int cardValue;
        var int checkValue;

        let isEmpty = stack.empty();
        if (isEmpty) {
            let cardValue = card.getValue();
            if (~(cardValue = 13)) {
                return false;
            }
            return true;
        }
        let currentHead = stack.getHead();
        let currentSuit = currentHead.getSuit();
        let cardSuit = card.getSuit();
        let checkSuit = currentSuit + cardSuit;
        if (checkSuit < 2) {
            return false;
        }
        if (checkSuit > 4) {
            return false;
        }
        let currentValue = currentHead.getValue();
        let cardValue = card.getValue();
        let checkValue = currentValue - cardValue;
        if (~(checkValue = 1)) {
            return false;
        }
        return true;
    }

    method void addCardNewLayer(Card card) {
	    var int i;
	    var Card tmpCard;
		
		let tmpCard = stack.getHead();
		if (~(tmpCard = null)) {
		    let i = stack.count() - 1;
			do Graphics.eraseFullCardToPart(column, row, i);
			do tmpCard.putBack();
		}
		
        do stack.push(card);
		let i = stack.count() - 1;
		do card.draw(column, row, i);
        return;
    }
	
	method void addCardFirstLayer(Card card) {
	    var int i;
	    var Card tmpCard;
		
		let tmpCard = stack.getHead();
		if (~(tmpCard = null)) {
			do Graphics.eraseFullCard(column, row, 0);
			do tmpCard.putBack();
		}
		
        do stack.push(card);
		do card.draw(column, row, 0);
        return;
    }

    method void removeCard() {
        do stack.pop();
        return;
    }

    method Card peekCard() {
        var Card card;

        let card = stack.getHead();
        return card;
    }

    method boolean checkHead() {
        var Card card;
        var boolean isOpened;

        let card = stack.getHead();
        if (card = null) {
            return false;
        }
        let isOpened = card.opened();
        if (isOpened) {
            return false;
        }
        do card.open();
        return true;
    }
	
	method void select() {
	    var int layer;
		var Card cardToMove;
		
		let layer = stack.count() - 1;
		if (~(layer < 0)) {
		    let cardToMove = stack.pop();
		    do toMove.push(cardToMove);
		    do Graphics.selectSubdeck(column, row, layer, layer);
		}
	    
		return;
	}
	
	method void deselect() {
	    var int upperLayer;
		var int i;
		var Card cardToMove;
		
		let upperLayer = stack.count();
		let i = toMove.count();
		do Graphics.removeSubdeckSelection(column, row, upperLayer, upperLayer + i - 1);
		while (i > 0) {
		    let cardToMove = toMove.pop();
			do stack.push(cardToMove);
		    let i = i - 1;
		}
		
		return;
	}
	
	method void increaseSubstack() {
	    var int stackCount;
		var int lowerLayer;
		var Card cardToMove;
		var Card moveHead;
		
		let stackCount = stack.count();
		if (stackCount > 0) {
		    let cardToMove = stack.getHead();
			if (~(cardToMove.opened())) {
			    return;
			}
			let moveHead = toMove.getHead();
			if (~(cardToMove.getValue() - moveHead.getValue() = 1)) {
			    return;
			}
			if ((cardToMove.getSuit() < 2) & (moveHead.getSuit() < 2)) {
			    return;
			}
			if ((cardToMove.getSuit() > 1) & (moveHead.getSuit() > 1)) {
			    return;
			}
			let lowerLayer = toMove.count() + stackCount - 1;
			do toMove.push(cardToMove);
			do stack.pop();
			do Graphics.removeSubdeckSelection(column, row, stackCount, lowerLayer);
			do Graphics.selectSubdeck(column, row, stackCount - 1, lowerLayer);
		}
		return;
	}
	
	method void decreaseSubstack() {
	    var int moveCount;
		var int stackCount;
		var int lowerLayer;
		var Card cardToReturn;
		
		let moveCount = toMove.count();
		if (moveCount > 1) {
		    let cardToReturn = toMove.getHead();
			let stackCount = stack.count();
			let lowerLayer = stackCount + moveCount - 1;
			do stack.push(cardToReturn);
			do toMove.pop();
			do Graphics.removeSubdeckSelection(column, row, stackCount, lowerLayer);
			do Graphics.selectSubdeck(column, row, stackCount + 1, lowerLayer);
		}
		return;
	}
	
	method int getSelectedCount() {
	    return toMove.count();
	}
	
	method Card getSubstackBottom() {
	    return toMove.getHead();
	}
	
	method Stack takeCardsToMove() {
		var Card card;
		var int stackCount;
		var int moveCount;
		var int i;
		
		let moveCount = toMove.count();
		if (moveCount = 0) {
		    return toMove;
		}
		
		let stackCount = stack.count();
		do Graphics.removeSubdeckSelection(column, row, stackCount, stackCount + moveCount - 1);		
		let i = 1;
		while (i < moveCount) {
		    do Graphics.eraseCardPart(column, row, stackCount + i - 1);
			let i = i + 1;
		}
		do Graphics.eraseFullCard(column, row, stackCount + i - 1);
		
		let card = stack.getHead();
		if (~(card = null)) {
		    do card.open();
			do card.putFront();
			do card.draw(column, row, stackCount - 1);
		}
		
	    return toMove;
	}

	method boolean isEmpty() {
		return stack.empty();
	}

	method void selectAll() {
		var int layer;
		var Card cardToMove;
		
		let layer = stack.count() - 1;
		while (~(layer < 0)) {
		    let cardToMove = stack.pop();
			do cardToMove.close();
		    do toMove.push(cardToMove);
		}
	    
		return;
	}
}