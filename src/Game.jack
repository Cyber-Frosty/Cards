class Game {
    field boolean gameOn;
	field boolean exitTriggered;
	field int cardsInGame;
	field int previousKey;
	
    field int cursorColumn;
	field int cursorRow;
	field Pile pileTakeFrom;
	field boolean editingSubstack;
	
	field Array tableau;
	field Array stock;
	field Array foundations;
	
	constructor Game new() {
		var int i;

	    let foundations = Array.new(4);
		let i = 0;
		while (i < 4) {
		    let foundations[i] = Pile.new(3 + i, 0);
			let i = i + 1;
		}
		
		let tableau = Array.new(7);
		let i = 0;
		while (i < 7) {
			let tableau[i] = Pile.new(i, 1);
			let i = i + 1;
		}
		
		let stock = Array.new(2);
		let stock[0] = Pile.new(0, 0);
		let stock[1] = Pile.new(1, 0);
		
	    return this;
	}
	
	method void dispose() {
	    var Pile tmpPile;
	    var int i;
		
		let i = 0;
		while (i < 4) {
		    let tmpPile = foundations[i];
		    do tmpPile.dispose();
			let i = i + 1;
		}
		
		let i = 0;
		while (i < 7) {
		    let tmpPile = tableau[i];
		    do tmpPile.dispose();
			let i = i + 1;
		}
		
		let i = 0;
		while (i < 2) {
		    let tmpPile = stock[i];
		    do tmpPile.dispose();
			let i = i + 1;
		}
		
		do foundations.dispose();
		do tableau.dispose();
		do stock.dispose();
	    do Memory.deAlloc(this);
		return;
	}
	
	method void runGame() {
	    do init();
		while (gameOn) {
		    do processKey();
			let gameOn = ~exitTriggered & (cardsInGame > 0);
		}
		
		return;
    }
	
	method boolean isExitTriggered() {
	    return exitTriggered;
	}
	
	method void init() {
	    var Pile tmpPile;
	    var Card tmpCard;
        var int i;
		var int a;
		var int b;
		var Array cards;

        do Screen.clearScreen();
		do clear();
		let gameOn = true;
		let exitTriggered = false;
		let cardsInGame = 52;
	    let cursorColumn = 0;
		let cursorRow = 1;
		let editingSubstack = false;
		
	    let pileTakeFrom = null;

		let cards = getAllCards();

		let a = 0;
		let b = 0;

		while (a < 7) {
			let i = 0;
			let tmpPile = tableau[a];
			while (i < a) {
				let tmpCard = cards[b];
				do tmpPile.addCardNewLayer(tmpCard);
				let b = b + 1;
				let i = i + 1;
			}
			let tmpCard = tmpPile.peekCard();
			if (~(tmpCard = null)) {
				do tmpCard.open();
				do tmpCard.putFront();
				do tmpPile.redrawPileHead(true);
			}
			
			let a = a + 1;
		}

		let tmpPile = stock[0];
		while (b < 52) {
			let tmpCard = cards[b];
			do tmpPile.addCardNoGraphics(tmpCard);
			let b = b + 1;
		}
		let tmpCard = tmpPile.peekCard();
		do tmpCard.putFront();
		do tmpPile.redrawClosedStock();
		let stock[0] = tmpPile;
		
		do Graphics.addCursor(cursorColumn, cursorRow, 0);
		
		return;
	}
	
	method void clear() {
	    var Pile tmpPile;
	    var int i;
		
		let i = 0;
		while (i < 4) {
		    let tmpPile = foundations[i];
		    do tmpPile.deleteCards();
			let i = i + 1;
		}
		
		let i = 0;
		while (i < 7) {
		    let tmpPile = tableau[i];
		    do tmpPile.deleteCards();
			let i = i + 1;
		}
		
		let i = 0;
		while (i < 2) {
		    let tmpPile = stock[i];
		    do tmpPile.deleteCards();
			let i = i + 1;
		}
		
		return;
	}

	method Array getAllCards() {
		var Array ints;
		var Array cards;
		var Random rnd;
		var int i;
		var int j;
		var int tmp;
		var int suit;
		var int value;
		
		let ints = Array.new(52);
		let i = 0;
		while (i < 52) {
			let ints[i] = i;
			let i = i + 1;
		}

		// быбо
		let rnd = Random.new(17);
		let i = 51;
		while (i > -1) {
			let j = rnd.randRange(0, i);
			let tmp = ints[i];
			let ints[i] = ints[j];
			let ints[j] = tmp;
			let i = i - 1;
		}
		
		let cards = Array.new(52);
		let i = 0;
		while (i < 52) {
			let suit = ints[i] / 13;
			let value = ints[i] - (suit * 13) + 1;
			let cards[i] = Card.new(value, suit, false, false);
			let i = i + 1;
		}

		return cards;
	}
	
	method void processKey()
	{
	    var int key;
		
		let key = Keyboard.keyPressed();
		if (key = previousKey) {
		    return;
		}
		let previousKey = key;
		
		if (key = 130) { //left
		    do goLeft();
			return;
		}
		if (key = 132) { //right
		    do goRight();
			return;
		}
		if (key = 131) { //up
		    do processUp();
			return;
		}
		if (key = 133) { //down
		    do processDown();
			return;
		}
		if (key = 128) { //enter
		    do processEnter();
			return;
		}
		if (key = 32) { //space
			do moveToFoundation();
			return;
		}
		if (key = 140) { //esc
		    let exitTriggered = true;
			return;
		}
		
		return;
	}
	
	method void processUp() {
	    if (editingSubstack) {
		    do pileTakeFrom.increaseSubstack();
		}
		else {
		    if (~(cursorColumn = 2)) {
			    do goVertically(0);
			}
		}
	    return;
	}
	
	method void processDown() {
	    if (editingSubstack & ~(pileTakeFrom = stock[1])) {
		    do pileTakeFrom.decreaseSubstack();
		}
		else {
		    do goVertically(1);
		}
	    return;
	}
	
	method void processEnter() {
	    if ((cursorRow = 0) & (cursorColumn = 0)) {
		    do scrollStock();
			return;
		}
		if ((cursorRow = 0) & (cursorColumn > 2)) {
		    return;
		}
	    if (pileTakeFrom = null) {
		    do selectSubstack();
		}
		else {
		    if (editingSubstack) {
			    do deselectSubstack();
			}
			else {
			    do moveSubstack();
			}
		}
		return;
	}

	method void scrollStock() {
		var Pile closedStock;
		var Pile openStock;

		var Stack stockStack;
		var Card card;

		if (~(pileTakeFrom = null)) {
			return;
		}

		let closedStock = stock[0];
		let openStock = stock[1];

		if (closedStock.isEmpty()) {
			if (openStock.isEmpty()) {
				return;
			}
			let stockStack = openStock.getRefreshedStock();
			do closedStock.refreshStock(stockStack); 
			let card = closedStock.peekCard();
			if (~(card = null)) {
				do card.putFront();
				do card.draw(0, 0, 0);
			}
		}
		else {
			let card = closedStock.removeCard();
			do closedStock.redrawClosedStock();
			do card.open();
			do openStock.addCardFirstLayer(card);
		}

		do Graphics.addCursor(0, 0, 0);
		return;
	}
	
	method void selectSubstack() {
		var Pile tmpPile;

		let tmpPile = getCurrentPile();
		if (tmpPile.isEmpty()) {
			return;
		}

	    let pileTakeFrom = getCurrentPile();
		let editingSubstack = true;
		do Graphics.removeCursor(cursorColumn, cursorRow, 0);
		do pileTakeFrom.select();
		
		return;
	}
	
	method void deselectSubstack() {
		do pileTakeFrom.deselect();
		let pileTakeFrom = null;
		let editingSubstack = false;
		do Graphics.addCursor(cursorColumn, cursorRow, 0);
		
		return;
	}
	
	//todo row col
	method Pile getCurrentPile() {
	    if (cursorRow = 1) {
			return tableau[cursorColumn];
		} else {
			if (cursorColumn < 2) {
				return stock[cursorColumn];
			}
            if (cursorColumn > 2) {
				return foundations[cursorColumn - 3];
			}
		}
		return null;
	}
	
	method void goRight() {
	    var boolean erase;
		var Pile pileOn;
		
	    if (cursorColumn = 6) {
		    return;
		}
		
		if (editingSubstack) {
		    let editingSubstack = false;
		} else {
		    do Graphics.removeCursor(cursorColumn, cursorRow, 0);
		}
		
		let cursorColumn = cursorColumn + 1;
		if ((cursorRow = 0) & (cursorColumn = 2)) {
		    let cursorColumn = 3;
		}
		
		if (~(pileTakeFrom = null)) {
		    let pileOn = getCurrentPile();
			if (pileOn = pileTakeFrom) {
			    let editingSubstack = true;
			    return;
			}
		}
		do Graphics.addCursor(cursorColumn, cursorRow, 0);
	    return;
	}
	
	method void goLeft() {
		var Pile pileOn;
	
	    if (cursorColumn = 0) {
		    return;
		}
		
		if (editingSubstack) {
		    let editingSubstack = false;
		} else {
		    do Graphics.removeCursor(cursorColumn, cursorRow, 0);
		}
		
		let cursorColumn = cursorColumn - 1;
		if ((cursorRow = 0) & (cursorColumn = 2)) {
		    let cursorColumn = 1;
		}
		
		if (~(pileTakeFrom = null)) {
		    let pileOn = getCurrentPile();
			if (pileOn = pileTakeFrom) {
			    let editingSubstack = true;
			    return;
			}
		}
		do Graphics.addCursor(cursorColumn, cursorRow, 0);
	    return;
	}
	
	method void goVertically(int goTo) {
	    var Pile pileOn;
		
	    if (cursorRow = goTo) {
		    return;
		}
		
		if (editingSubstack) {
		    let editingSubstack = false;
		} else {
		    do Graphics.removeCursor(cursorColumn, cursorRow, 0);
		}
		
		let cursorRow = goTo;

		if (~(pileTakeFrom = null)) {
		    let pileOn = getCurrentPile();
			if (pileOn = pileTakeFrom) {
			    let editingSubstack = true;
			    return;
			}
		}
		do Graphics.addCursor(cursorColumn, cursorRow, 0);
	    return;
	}
	
	method void moveSubstack() {
		var int moveCount;
		
	    if (pileTakeFrom = null) {
		    return;
		}
		
		if (cursorRow = 1) {
		    do moveToTableau();
		} 
		else {
		    if (cursorColumn < 3) {
			    return;
			}
			do moveToFoundation();
		}
		
		return;
	}
	
	method void moveToTableau() {
	    var Pile pileTo;
	    var Card card;
		var Stack toMove;
		var int moveCount;
		
	    let pileTo = tableau[cursorColumn];
		if (pileTo = pileTakeFrom) {
			return;
		}
		
		let card = pileTakeFrom.getSubstackBottom();
		if (~(pileTo.canAddedToTableau(card))) {
		    return;
		}
	    
		do Graphics.removeCursor(cursorColumn, cursorRow, 0);
		let toMove = pileTakeFrom.takeCardsToMove();
		let moveCount = toMove.count();
		while (moveCount > 0) {
		    let card = toMove.pop();
			do card.erase();
			do pileTo.addCardNewLayer(card);
			let moveCount = moveCount - 1;
		}
		
		do pileTakeFrom.redrawPileHead(~(pileTakeFrom = stock[1]));
		let pileTakeFrom = null;
		do Graphics.addCursor(cursorColumn, cursorRow, 0);
		return;
	}
	
	method void moveToFoundation() {
	    var Pile pileTo;
	    var Card movedCard;
		var Card pileCard;
		var Stack toMove;
		var int moveCount;
		var int suit;
		
		if (pileTakeFrom = null) {
		    return;
		}
		
		let moveCount = pileTakeFrom.getSelectedCount();
		
		if (moveCount > 1) {
		    return;
		}
		
		let movedCard = pileTakeFrom.getSubstackBottom();
		let pileTo = foundations[movedCard.getSuit()];
		let pileCard = pileTo.peekCard();
		
		if (pileCard = null) {
		    if (movedCard.getValue() > 1) {
			    return;
			}
		}
		else {
		    if (~(movedCard.getValue() - pileCard.getValue() = 1)) {
			    return;
			}
		}
		
		let toMove = pileTakeFrom.takeCardsToMove();
		let movedCard = toMove.pop();
		do movedCard.erase();
	    do pileTo.addCardFirstLayer(movedCard);
		do pileTakeFrom.redrawPileHead(~(pileTakeFrom = stock[1]));

		if (getCurrentPile() = pileTakeFrom) {
		    do Graphics.addCursor(cursorColumn, cursorRow, 0);
		}
		let pileTakeFrom = null;
		let editingSubstack = false;
		let cardsInGame = cardsInGame - 1;
		return;
	}
}